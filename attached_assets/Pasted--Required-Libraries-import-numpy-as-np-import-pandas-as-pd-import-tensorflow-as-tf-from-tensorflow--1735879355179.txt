# Required Libraries
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

# Load SPY ETF data from Yahoo Finance
import yfinance as yf

data = yf.download('SPY', start='2010-01-01', end='2024-12-31')

# Preprocess the data
data['Close'] = data['Close'].fillna(method='ffill')
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1, 1))

# Create sequences for the LSTM model
sequence_length = 60
X = []
y = []

for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i, 0])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Reshape data for LSTM
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

# Define the LSTM model
model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=False),
    Dropout(0.2),
    Dense(units=1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.summary()

# Train the model
model.fit(X_train, y_train, epochs=5, batch_size=32)

# Evaluate the model
loss = model.evaluate(X_test, y_test)
print(f"Test Loss: {loss}")

# Save the trained model in TensorFlow SavedModel format
model.save("spy_stock_model")
print("Model saved as 'spy_stock_model'")

# Convert the model to TensorFlow Lite format
converter = tf.lite.TFLiteConverter.from_saved_model("spy_stock_model")
converter.target_spec.supported_ops = [
    tf.lite.OpsSet.TFLITE_BUILTINS,
    tf.lite.OpsSet.SELECT_TF_OPS
]
converter._experimental_lower_tensor_list_ops = False
converter.allow_custom_ops = True
converter.experimental_enable_resource_variables = True
converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.experimental_new_converter = True
tflite_model = converter.convert()

# Save the converted model to a file
with open("spy_stock_model.tflite", "wb") as f:
    f.write(tflite_model)

print("Model converted to TensorFlow Lite format and saved as 'spy_stock_model.tflite'")

# Create a simple web server for file downloads
from flask import Flask, send_file

app = Flask(__name__)

@app.route('/')
def index():
    return '''
    <h1>SPY Stock Model Download</h1>
    <p><a href="/download/tflite">Download TFLite Model</a></p>
    <p><a href="/download/savedmodel">Download SavedModel (ZIP)</a></p>
    '''

@app.route('/download/tflite')
def download_tflite():
    return send_file('spy_stock_model.tflite', as_attachment=True)

@app.route('/download/savedmodel')
def download_savedmodel():
    import shutil
    shutil.make_archive('spy_stock_model_full', 'zip', 'spy_stock_model')
    return send_file('spy_stock_model_full.zip', as_attachment=True)

if __name__ == '__main__':
    print("Starting Flask server...")
    app.run(host='0.0.0.0', port=8080)